name: Build and Release Electron App

on:
  push:
    branches: [ main ]
    tags:
      - v*.*.*
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag to release (e.g., v1.0.2). Leave empty to not release.'
        required: false
        type: string

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            build: npm run build:linux:appimage
            artifact: linux-artifacts
          - os: windows-latest
            build: npm run build:win:x64
            artifact: windows-artifacts
          - os: macos-latest
            build: npm run build:mac:arm64
            artifact: macos-artifacts

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Compute version from tag
        id: compute_version
        shell: bash
        run: |
          VERSION_INPUT="${{ github.event.inputs.tag_name || '' }}"
          if [[ -n "$VERSION_INPUT" ]]; then
            ver="${VERSION_INPUT#v}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            ver="${GITHUB_REF_NAME#v}"
          else
            ver=""
          fi
          echo "version=$ver" >> $GITHUB_OUTPUT

      - name: Set package.json version
        if: steps.compute_version.outputs.version != ''
        run: npm version ${{ steps.compute_version.outputs.version }} --no-git-tag-version

      - name: Cache Electron downloads
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-${{ hashFiles('yarn.lock') }}

      - name: Build
        run: ${{ matrix.build }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: dist/**/*
          if-no-files-found: ignore

  publish:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name != '')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name || github.ref_name }}
          target_commitish: ${{ github.sha }}
          files: |
            dist/**/*.exe
            dist/**/*.dmg
            dist/**/*.AppImage
            dist/**/*.deb
            dist/**/*.rpm
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
